plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdk rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.vule.demotmdb"
        minSdk rootProject.minSdkVersion
        targetSdk rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        viewBinding true
    }

    flavorDimensions "default"
    productFlavors {
        develop {
            versionNameSuffix = "develop"
            applicationIdSuffix = ".dev"
            manifestPlaceholders = [applicationName: "The Movies Dev"]
        }

        production {
            manifestPlaceholders = [applicationName: "The Movies"]
        }
    }
    applicationVariants.all { variant ->
        variant.buildConfigField "String", "TMDB_API_KEY", "\"${getProperty("local.properties", "tmdb_api_key")}\""
        variant.buildConfigField "String", "BASE_URL", "\"https://api.themoviedb.org/\""
    }
}

dependencies {

    implementation "com.google.android.material:material:$materialVersion"
    implementation "androidx.activity:activity-ktx:$androidActivity"
    implementation "androidx.fragment:fragment-ktx:$androidFragment"
    implementation "androidx.palette:palette-ktx:$androidxPalette"

    // architecture components
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // network
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    // glide
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    kapt "com.github.bumptech.glide:compiler:$glideVersion"

    // whatIf
    implementation "com.github.skydoves:whatif:$whatIfVersion"

    // logging
    implementation "com.jakewharton.timber:timber:$timberVersion"
    implementation "com.facebook.stetho:stetho:$stethoVersion"
    implementation "com.facebook.stetho:stetho-okhttp3:$stethoVersion"

    // custom view
    implementation "com.ms-square:expandableTextView:$expandableTextViewVersion"

    //Dagger - Hilt
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-android-compiler:$hiltVersion"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$hiltLifecycleVersion"
    kapt "androidx.hilt:hilt-compiler:$hiltCompilerVersion"

}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}